qurantined_data <- as.data.frame(quarantined_data)
rownames(quarantined_data) <- data$Location
for(state in data$Location){
state_data <- data[data$Location == state, ]
confirmed <- as.numeric(state_data[2])
deaths <- as.numeric(state_data[3])
recovered <- as.numeric(state_data[4])
population <- as.numeric(state_data[5])
currently_infected <- confirmed - deaths - recovered
quarantined <- currently_infected
exposed <- currently_infected*2
insusceptible <- exposed + quarantined
susceptible <- population - (insusceptible + exposed + currently_infected + quarantined + recovered + deaths)
parameters <- c(N = population, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
ode_state <- c(S = susceptible, P = insusceptible, E = exposed, I = currently_infected, Q = quarantined, R = recovered, D = deaths)
time <- seq(0, max_time, by = 1)
out <- as.data.frame(ode(y = ode_state, times = time, func = SEIR_deriv, parms = parameters))
print(out)
list.append(projections, state = out)
print(projections)
#for(i in 1:101){
# death_data[state,i] <- out["D"][i]
# infections_data[state,i] <- out["I"][i]
# recovered_data[state,i] <- out["R"][i]
#  quarantined_data[state,i] <- out["Q"][i]
#}
#rm(out)
}
return(projections)
}
projections <- generate_projections()
generate_projections <- function(max_time = 100){
library(deSolve)
library(rlist)
source("load_local_data.R")
source("SEIR_model.R")
data <- load_local_data()
death_data <- matrix(nrow = 51, ncol = 101)
colnames(death_data) <- seq(from = 0, to = 100, by = 1)
death_data <- as.data.frame(death_data)
rownames(death_data) <- data$Location
infections_data <- matrix(nrow = 51, ncol = 101)
colnames(infections_data) <- seq(from = 0, to = 100, by = 1)
infections_data <- as.data.frame(infections_data)
rownames(infections_data) <- data$Location
recovered_data <- matrix(nrow = 51, ncol = 101)
colnames(recovered_data) <- seq(from = 0, to = 100, by = 1)
recovered_data <- as.data.frame(recovered_data)
rownames(recovered_data) <- data$Location
quarantined_data <- matrix(nrow = 51, ncol = 101)
colnames(quarantined_data) <- seq(from = 0, to = 100, by = 1)
qurantined_data <- as.data.frame(quarantined_data)
rownames(quarantined_data) <- data$Location
for(state in data$Location){
state_data <- data[data$Location == state, ]
confirmed <- as.numeric(state_data[2])
deaths <- as.numeric(state_data[3])
recovered <- as.numeric(state_data[4])
population <- as.numeric(state_data[5])
currently_infected <- confirmed - deaths - recovered
quarantined <- currently_infected
exposed <- currently_infected*2
insusceptible <- exposed + quarantined
susceptible <- population - (insusceptible + exposed + currently_infected + quarantined + recovered + deaths)
parameters <- c(N = population, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
ode_state <- c(S = susceptible, P = insusceptible, E = exposed, I = currently_infected, Q = quarantined, R = recovered, D = deaths)
time <- seq(0, max_time, by = 1)
out <- as.data.frame(ode(y = ode_state, times = time, func = SEIR_deriv, parms = parameters))
death_data[state,i] <- t(out["D"])
infections_data[state,i] <- t(out["I"])
recovered_data[state,i] <- t(out["R"])
quarantined_data[state,i] <- t(out["Q"])
rm(out)
}
return(projections)
}
projections <- generate_projections()
parameters <- c(N = 19540000, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
state <- c(S = 19539182, P = 818, E = 300, I = 300, Q = 218, R = 0, D = 0)
time <- seq(0, 200, by = 1)out <- ode(y = state, times = time, func = SEIR_deriv, parms = parameters)
parameters <- c(N = 19540000, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
state <- c(S = 19539182, P = 818, E = 300, I = 300, Q = 218, R = 0, D = 0)
time <- seq(0, 200, by = 1)
out <- ode(y = state, times = time, func = SEIR_deriv, parms = parameters)
out["D"]
View(out)
out[,"D"]
generate_projections <- function(max_time = 100){
library(deSolve)
library(rlist)
source("load_local_data.R")
source("SEIR_model.R")
data <- load_local_data()
death_data <- matrix(nrow = 51, ncol = 101)
colnames(death_data) <- seq(from = 0, to = 100, by = 1)
death_data <- as.data.frame(death_data)
rownames(death_data) <- data$Location
infections_data <- matrix(nrow = 51, ncol = 101)
colnames(infections_data) <- seq(from = 0, to = 100, by = 1)
infections_data <- as.data.frame(infections_data)
rownames(infections_data) <- data$Location
recovered_data <- matrix(nrow = 51, ncol = 101)
colnames(recovered_data) <- seq(from = 0, to = 100, by = 1)
recovered_data <- as.data.frame(recovered_data)
rownames(recovered_data) <- data$Location
quarantined_data <- matrix(nrow = 51, ncol = 101)
colnames(quarantined_data) <- seq(from = 0, to = 100, by = 1)
qurantined_data <- as.data.frame(quarantined_data)
rownames(quarantined_data) <- data$Location
for(state in data$Location){
state_data <- data[data$Location == state, ]
confirmed <- as.numeric(state_data[2])
deaths <- as.numeric(state_data[3])
recovered <- as.numeric(state_data[4])
population <- as.numeric(state_data[5])
currently_infected <- confirmed - deaths - recovered
quarantined <- currently_infected
exposed <- currently_infected*2
insusceptible <- exposed + quarantined
susceptible <- population - (insusceptible + exposed + currently_infected + quarantined + recovered + deaths)
parameters <- c(N = population, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
ode_state <- c(S = susceptible, P = insusceptible, E = exposed, I = currently_infected, Q = quarantined, R = recovered, D = deaths)
time <- seq(0, max_time, by = 1)
out <- ode(y = ode_state, times = time, func = SEIR_deriv, parms = parameters)
death_data[state,] <- t(out[,"D"])
infections_data[state,] <- t(out[,"I"])
recovered_data[state,] <- t(out[,"R"])
quarantined_data[state,] <- t(out[,"Q"])
rm(out)
}
return(projections)
}
generate_projections <- function(max_time = 100){
library(deSolve)
library(rlist)
source("load_local_data.R")
source("SEIR_model.R")
data <- load_local_data()
death_data <- matrix(nrow = 51, ncol = 101)
colnames(death_data) <- seq(from = 0, to = 100, by = 1)
death_data <- as.data.frame(death_data)
rownames(death_data) <- data$Location
infections_data <- matrix(nrow = 51, ncol = 101)
colnames(infections_data) <- seq(from = 0, to = 100, by = 1)
infections_data <- as.data.frame(infections_data)
rownames(infections_data) <- data$Location
recovered_data <- matrix(nrow = 51, ncol = 101)
colnames(recovered_data) <- seq(from = 0, to = 100, by = 1)
recovered_data <- as.data.frame(recovered_data)
rownames(recovered_data) <- data$Location
quarantined_data <- matrix(nrow = 51, ncol = 101)
colnames(quarantined_data) <- seq(from = 0, to = 100, by = 1)
qurantined_data <- as.data.frame(quarantined_data)
rownames(quarantined_data) <- data$Location
for(state in data$Location){
state_data <- data[data$Location == state, ]
confirmed <- as.numeric(state_data[2])
deaths <- as.numeric(state_data[3])
recovered <- as.numeric(state_data[4])
population <- as.numeric(state_data[5])
currently_infected <- confirmed - deaths - recovered
quarantined <- currently_infected
exposed <- currently_infected*2
insusceptible <- exposed + quarantined
susceptible <- population - (insusceptible + exposed + currently_infected + quarantined + recovered + deaths)
parameters <- c(N = population, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
ode_state <- c(S = susceptible, P = insusceptible, E = exposed, I = currently_infected, Q = quarantined, R = recovered, D = deaths)
time <- seq(0, max_time, by = 1)
out <- ode(y = ode_state, times = time, func = SEIR_deriv, parms = parameters)
death_data[state,] <- t(out[,"D"])
infections_data[state,] <- t(out[,"I"])
recovered_data[state,] <- t(out[,"R"])
quarantined_data[state,] <- t(out[,"Q"])
rm(out)
}
return(projections)
}
projections <- generate_projections()
generate_projections <- function(max_time = 100){
library(deSolve)
library(rlist)
source("load_local_data.R")
source("SEIR_model.R")
data <- load_local_data()
death_data <- matrix(nrow = 51, ncol = 101)
colnames(death_data) <- seq(from = 0, to = 100, by = 1)
death_data <- as.data.frame(death_data)
rownames(death_data) <- data$Location
infections_data <- matrix(nrow = 51, ncol = 101)
colnames(infections_data) <- seq(from = 0, to = 100, by = 1)
infections_data <- as.data.frame(infections_data)
rownames(infections_data) <- data$Location
recovered_data <- matrix(nrow = 51, ncol = 101)
colnames(recovered_data) <- seq(from = 0, to = 100, by = 1)
recovered_data <- as.data.frame(recovered_data)
rownames(recovered_data) <- data$Location
quarantined_data <- matrix(nrow = 51, ncol = 101)
colnames(quarantined_data) <- seq(from = 0, to = 100, by = 1)
qurantined_data <- as.data.frame(quarantined_data)
rownames(quarantined_data) <- data$Location
for(state in data$Location){
state_data <- data[data$Location == state, ]
confirmed <- as.numeric(state_data[2])
deaths <- as.numeric(state_data[3])
recovered <- as.numeric(state_data[4])
population <- as.numeric(state_data[5])
currently_infected <- confirmed - deaths - recovered
quarantined <- currently_infected
exposed <- currently_infected*2
insusceptible <- exposed + quarantined
susceptible <- population - (insusceptible + exposed + currently_infected + quarantined + recovered + deaths)
parameters <- c(N = population, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
ode_state <- c(S = susceptible, P = insusceptible, E = exposed, I = currently_infected, Q = quarantined, R = recovered, D = deaths)
time <- seq(0, max_time, by = 1)
out <- ode(y = ode_state, times = time, func = SEIR_deriv, parms = parameters)
death_data[state,] <- t(out[,"D"])
infections_data[state,] <- t(out[,"I"])
recovered_data[state,] <- t(out[,"R"])
quarantined_data[state,] <- t(out[,"Q"])
rm(out)
}
return()
}
projections <- generate_projections()
generate_projections <- function(max_time = 100){
library(deSolve)
library(rlist)
source("load_local_data.R")
source("SEIR_model.R")
data <- load_local_data()
death_data <- matrix(nrow = 51, ncol = 101)
colnames(death_data) <- seq(from = 0, to = 100, by = 1)
death_data <- as.data.frame(death_data)
rownames(death_data) <- data$Location
infections_data <- matrix(nrow = 51, ncol = 101)
colnames(infections_data) <- seq(from = 0, to = 100, by = 1)
infections_data <- as.data.frame(infections_data)
rownames(infections_data) <- data$Location
recovered_data <- matrix(nrow = 51, ncol = 101)
colnames(recovered_data) <- seq(from = 0, to = 100, by = 1)
recovered_data <- as.data.frame(recovered_data)
rownames(recovered_data) <- data$Location
quarantined_data <- matrix(nrow = 51, ncol = 101)
colnames(quarantined_data) <- seq(from = 0, to = 100, by = 1)
qurantined_data <- as.data.frame(quarantined_data)
rownames(quarantined_data) <- data$Location
for(state in data$Location){
state_data <- data[data$Location == state, ]
confirmed <- as.numeric(state_data[2])
deaths <- as.numeric(state_data[3])
recovered <- as.numeric(state_data[4])
population <- as.numeric(state_data[5])
currently_infected <- confirmed - deaths - recovered
quarantined <- currently_infected
exposed <- currently_infected*2
insusceptible <- exposed + quarantined
susceptible <- population - (insusceptible + exposed + currently_infected + quarantined + recovered + deaths)
parameters <- c(N = population, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
ode_state <- c(S = susceptible, P = insusceptible, E = exposed, I = currently_infected, Q = quarantined, R = recovered, D = deaths)
time <- seq(0, max_time, by = 1)
out <- ode(y = ode_state, times = time, func = SEIR_deriv, parms = parameters)
death_data[state,] <- t(out[,"D"])
infections_data[state,] <- t(out[,"I"])
recovered_data[state,] <- t(out[,"R"])
quarantined_data[state,] <- t(out[,"Q"])
rm(out)
}
return(death_data)
}
projections <- generate_projections()
View(projections)
generate_projections <- function(max_time = 100){
library(deSolve)
library(rlist)
source("load_local_data.R")
source("SEIR_model.R")
data <- load_local_data()
death_data <- matrix(nrow = 51, ncol = 101)
colnames(death_data) <- seq(from = 0, to = 100, by = 1)
death_data <- as.data.frame(death_data)
rownames(death_data) <- data$Location
infections_data <- matrix(nrow = 51, ncol = 101)
colnames(infections_data) <- seq(from = 0, to = 100, by = 1)
infections_data <- as.data.frame(infections_data)
rownames(infections_data) <- data$Location
recovered_data <- matrix(nrow = 51, ncol = 101)
colnames(recovered_data) <- seq(from = 0, to = 100, by = 1)
recovered_data <- as.data.frame(recovered_data)
rownames(recovered_data) <- data$Location
quarantined_data <- matrix(nrow = 51, ncol = 101)
colnames(quarantined_data) <- seq(from = 0, to = 100, by = 1)
qurantined_data <- as.data.frame(quarantined_data)
rownames(quarantined_data) <- data$Location
for(state in data$Location){
state_data <- data[data$Location == state, ]
confirmed <- as.numeric(state_data[2])
deaths <- as.numeric(state_data[3])
recovered <- as.numeric(state_data[4])
population <- as.numeric(state_data[5])
currently_infected <- confirmed - deaths - recovered
quarantined <- currently_infected
exposed <- currently_infected*2
insusceptible <- exposed + quarantined
susceptible <- population - (insusceptible + exposed + currently_infected + quarantined + recovered + deaths)
parameters <- c(N = population, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
ode_state <- c(S = susceptible, P = insusceptible, E = exposed, I = currently_infected, Q = quarantined, R = recovered, D = deaths)
time <- seq(0, max_time, by = 1)
out <- ode(y = ode_state, times = time, func = SEIR_deriv, parms = parameters)
death_data[state,] <- t(out[,"D"])
infections_data[state,] <- t(out[,"I"])
recovered_data[state,] <- t(out[,"R"])
quarantined_data[state,] <- t(out[,"Q"])
rm(out)
}
projections <- list(death_data, infections_data, recovered_date, quarantined_data)
return(projections)
}
projections <- generate_projections()
generate_projections <- function(max_time = 100){
library(deSolve)
library(rlist)
source("load_local_data.R")
source("SEIR_model.R")
data <- load_local_data()
death_data <- matrix(nrow = 51, ncol = 101)
colnames(death_data) <- seq(from = 0, to = 100, by = 1)
death_data <- as.data.frame(death_data)
rownames(death_data) <- data$Location
infections_data <- matrix(nrow = 51, ncol = 101)
colnames(infections_data) <- seq(from = 0, to = 100, by = 1)
infections_data <- as.data.frame(infections_data)
rownames(infections_data) <- data$Location
recovered_data <- matrix(nrow = 51, ncol = 101)
colnames(recovered_data) <- seq(from = 0, to = 100, by = 1)
recovered_data <- as.data.frame(recovered_data)
rownames(recovered_data) <- data$Location
quarantined_data <- matrix(nrow = 51, ncol = 101)
colnames(quarantined_data) <- seq(from = 0, to = 100, by = 1)
qurantined_data <- as.data.frame(quarantined_data)
rownames(quarantined_data) <- data$Location
for(state in data$Location){
state_data <- data[data$Location == state, ]
confirmed <- as.numeric(state_data[2])
deaths <- as.numeric(state_data[3])
recovered <- as.numeric(state_data[4])
population <- as.numeric(state_data[5])
currently_infected <- confirmed - deaths - recovered
quarantined <- currently_infected
exposed <- currently_infected*2
insusceptible <- exposed + quarantined
susceptible <- population - (insusceptible + exposed + currently_infected + quarantined + recovered + deaths)
parameters <- c(N = population, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
ode_state <- c(S = susceptible, P = insusceptible, E = exposed, I = currently_infected, Q = quarantined, R = recovered, D = deaths)
time <- seq(0, max_time, by = 1)
out <- ode(y = ode_state, times = time, func = SEIR_deriv, parms = parameters)
death_data[state,] <- t(out[,"D"])
infections_data[state,] <- t(out[,"I"])
recovered_data[state,] <- t(out[,"R"])
quarantined_data[state,] <- t(out[,"Q"])
rm(out)
}
projections <- list(death_data, infections_data, recovered_data, quarantined_data)
return(projections)
}
projections <- generate_projections()
View(projections)
projections[1]
projections[[1]]
shiny::runApp()
runApp()
runApp()
runApp()
states <- readOGR("tl_2019_us_state.shp",
states <- readOGR("tl_2019_us_state.shp",
layer = "tl_2019_us_state", GDAL1_integer64_policy = TRUE)
)
states <- readOGR("tl_2019_us_state.shp",
layer = "tl_2019_us_state", GDAL1_integer64_policy = TRUE)
View(states)
!(states$STUSPS %in% c(
"PR","MP","GU","ME","AS", "AK", "HI", "VI")
)
allStates <- subset(states, !(states$STUSPS %in% c(
"PR","MP","GU","ME","AS", "AK", "HI", "VI")
))
View(allStates)
allStates$STUSPS
runApp()
states <- readOGR("tl_2019_us_state.shp",
layer = "tl_2019_us_state", GDAL1_integer64_policy = TRUE)
allStates <- subset(states, !(states$STUSPS %in% c(
"PR","MP","GU","ME","AS", "VI")
))
as.character(allStates$STUSPS)
runApp()
projections <- generate_projections()
projections[[1]]
projections[[1]]$`20``
projections[[1]]$`20`
projections[[1]]$20
projections[[1]]$"20"
runApp()
projections[[3]]$"30"
projections[[4]]$"30"
projections[[4]]
projections[[4]]$"30"
projections[[4]]["30"]
projections[[4]]
is.atomic(projections[[1]])
is.atomic(projections[[4]])
is.atomic(projections[[3]])
generate_projections <- function(max_time = 100){
library(deSolve)
library(rlist)
source("load_local_data.R")
source("SEIR_model.R")
data <- load_local_data()
death_data <- matrix(nrow = 51, ncol = 101)
colnames(death_data) <- seq(from = 0, to = 100, by = 1)
death_data <- as.data.frame(death_data)
rownames(death_data) <- data$Location
infections_data <- matrix(nrow = 51, ncol = 101)
colnames(infections_data) <- seq(from = 0, to = 100, by = 1)
infections_data <- as.data.frame(infections_data)
rownames(infections_data) <- data$Location
recovered_data <- matrix(nrow = 51, ncol = 101)
colnames(recovered_data) <- seq(from = 0, to = 100, by = 1)
recovered_data <- as.data.frame(recovered_data)
rownames(recovered_data) <- data$Location
quarantined_data <- matrix(nrow = 51, ncol = 101)
colnames(quarantined_data) <- seq(from = 0, to = 100, by = 1)
qurantined_data <- as.data.frame(quarantined_data)
rownames(quarantined_data) <- data$Location
for(state in data$Location){
state_data <- data[data$Location == state, ]
confirmed <- as.numeric(state_data[2])
deaths <- as.numeric(state_data[3])
recovered <- as.numeric(state_data[4])
population <- as.numeric(state_data[5])
currently_infected <- confirmed - deaths - recovered
quarantined <- currently_infected
exposed <- currently_infected*2
insusceptible <- exposed + quarantined
susceptible <- population - (insusceptible + exposed + currently_infected + quarantined + recovered + deaths)
parameters <- c(N = population, alpha = 0.085, beta = 1.0, gamma = 2^-1, delta = 7.4^-1, lambda = 0.02, kappa = 0.03)
ode_state <- c(S = susceptible, P = insusceptible, E = exposed, I = currently_infected, Q = quarantined, R = recovered, D = deaths)
time <- seq(0, max_time, by = 1)
out <- ode(y = ode_state, times = time, func = SEIR_deriv, parms = parameters)
death_data[state,] <- t(out[,"D"])
infections_data[state,] <- t(out[,"I"])
recovered_data[state,] <- t(out[,"R"])
quarantined_data[state,] <- t(out[,"Q"])
rm(out)
}
projections <- list(death_data, infections_data, recovered_data, as.data.frame(quarantined_data))
return(projections)
}
projections <- generate_projections()
is.atomic(projections[[4]])
projections[[4]]
runApp()
runApp()
runApp()
data_for_day <- data.frame(State = as.character(allStates$STUSPS), Deaths = projections[[1]]$char_days, Infections = projections[[2]]$char_days,
Recovered = projections[[3]]$char_days, Quarantined = projections[[4]]$char_days)
char_days <- "30"
data_for_day <- data.frame(State = as.character(allStates$STUSPS), Deaths = projections[[1]]$char_days, Infections = projections[[2]]$char_days,
Recovered = projections[[3]]$char_days, Quarantined = projections[[4]]$char_days)
as.character(allStates$STUSPS)
projections[[1]]$char_days
projections[[1]]
projections[[1]]$"30"
projections[[1]]$char_days
char_days
projections[[1]]$as.character(30)
projections[[1]]$`char_days`
days <- 30
projections[[1]]$days
projections[[1]]$`days``
``
projections[[1]]$`days`
projections[[1]]$as.character(days)
View(projections)
projections[[1]][char_days]
as.vector(projections[[1]][char_days])
runApp()
as.character(allStates$STUSPS)
sort(as.character(allStates$STUSPS))
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
install.packages(c("tidycensus", "tidyverse", "sf", "stringr"))
install.packages(c("tidycensus", "tidyverse", "sf", "stringr"))
install.packages(c("tidycensus", "tidyverse", "sf", "stringr"))
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus)
install.packages(c("tidycensus", "tidyverse", "sf", "stringr"))
install.packages(c("tidycensus", "tidyverse", "sf", "stringr"))
library(tidycensus)
install.packages("sd")
install.packages("sf")
install.packages("sf")
library(shiny)
library(leaflet)
library(rgdal)
library(tidycensus)
library(sf)
library(tidyverse)
install.packages(c("tidycensus", "tidyverse", "sf", "stringr"), dependencies = TRUE)
install.packages(c("tidycensus", "tidyverse", "sf", "stringr"), dependencies = TRUE)
